#include "myNewLib.hpp"

//namespace myNewLib {

	myLiquidCrystal::myLiquidCrystal(uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1,
			uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7){
//			: Print() {
		l = new LiquidCrystal(rs, enable, d0, d1, d2, d3, d4, d5, d6, d7);
		return;
	}

	myLiquidCrystal::myLiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t d0,
			uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t d5, uint8_t d6,
			uint8_t d7){
//			: Print() {
		l = new LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);
		return;
	}

	myLiquidCrystal::myLiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable, uint8_t d0,
			uint8_t d1, uint8_t d2, uint8_t d3){
//	:
//			Print() {
		l = new LiquidCrystal(rs, enable, d0, d1, d2, d3);
		return;
	}

	myLiquidCrystal::myLiquidCrystal(uint8_t rs, uint8_t enable, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3){
//		: Print() {
//	}
		l = new LiquidCrystal(rs, enable, d0, d1, d2, d3);
		return;
	}

	void myLiquidCrystal::begin(uint8_t cols, uint8_t rows, uint8_t charsize) {
		l->begin(cols, rows, charsize);
		return;
	}

	void myLiquidCrystal::setCursor(uint8_t a, uint8_t b) {
		l->setCursor(a, b);
		return;
	}

	void myLiquidCrystal::clear() {
		l->clear();
		return;
	}

	//TODO: pure virtual not considered
	size_t myLiquidCrystal::write(uint8_t value) {
		return l->write(value);
//	  return 1; // assume sucess
	}
//?}
